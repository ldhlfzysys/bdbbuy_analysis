localhost:BdbbuyDataCenter liweixi$ python3 manage.py inspectdb
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Adminuser(models.Model):
    name = models.CharField(max_length=50, blank=True, null=True)
    password = models.CharField(max_length=50, blank=True, null=True)
    boss = models.IntegerField(blank=True, null=True)
    driver = models.IntegerField(blank=True, null=True)
    store_manager = models.IntegerField()
    sale_manager = models.IntegerField(blank=True, null=True)
    sale_manager7 = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'adminuser'


class Area(models.Model):
    name = models.CharField(max_length=50, blank=True, null=True)
    driver_area = models.TextField(blank=True, null=True)
    driver_id = models.IntegerField(blank=True, null=True)
    driver_time = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'area'


class Car(models.Model):
    car_id = models.AutoField(primary_key=True)
    customer_id = models.IntegerField(blank=True, null=True)
    coupon_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'car'


class CarProduct(models.Model):
    car_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    product_count = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'car_product'


class Category(models.Model):
    category_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=200, blank=True, null=True)
    description = models.CharField(max_length=200, blank=True, null=True)
    parent_id = models.IntegerField(blank=True, null=True)
    level = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'category'


class CategoryProduct(models.Model):
    product_id = models.IntegerField(blank=True, null=True)
    category_id = models.IntegerField(blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'category_product'
        unique_together = (('product_id', 'category_id'),)


class Coupon(models.Model):
    coupon_type = models.IntegerField(blank=True, null=True)
    coupon_code = models.CharField(max_length=32, blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    need_price = models.IntegerField(blank=True, null=True)
    coupon_price = models.IntegerField(blank=True, null=True)
    coupon_desc = models.CharField(max_length=50, blank=True, null=True)
    isuse = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'coupon'


class CouponRule(models.Model):
    rule_id = models.AutoField(primary_key=True)
    need_price = models.IntegerField(blank=True, null=True)
    can_use_count = models.IntegerField(blank=True, null=True)
    discount_price = models.IntegerField(blank=True, null=True)
    discount_ratio = models.IntegerField(blank=True, null=True)
    coupon_desc = models.CharField(max_length=50, blank=True, null=True)
    free_shipping = models.IntegerField(blank=True, null=True)
    can_not_use = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'coupon_rule'


class CouponTmp(models.Model):
    rule_id = models.IntegerField(blank=True, null=True)
    coupon_code = models.CharField(max_length=32, blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    use_count = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'coupon_tmp'


class Customer(models.Model):
    customer_id = models.AutoField(unique=True)
    mobile = models.CharField(max_length=30, blank=True, null=True)
    first_name = models.CharField(max_length=32, blank=True, null=True)
    last_name = models.CharField(max_length=32, blank=True, null=True)
    email = models.CharField(max_length=32, blank=True, null=True)
    group_id = models.IntegerField(blank=True, null=True)
    default_address_id = models.IntegerField(blank=True, null=True)
    password_hash = models.CharField(max_length=90, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'customer'


class CustomerAddress(models.Model):
    address_id = models.AutoField(primary_key=True)
    customer_id = models.IntegerField(blank=True, null=True)
    country = models.CharField(max_length=20, blank=True, null=True)
    city = models.CharField(max_length=30, blank=True, null=True)
    company = models.CharField(max_length=20, blank=True, null=True)
    street = models.CharField(max_length=200, blank=True, null=True)
    post_code = models.CharField(max_length=11, blank=True, null=True)
    mobile = models.CharField(max_length=20, blank=True, null=True)
    first_name = models.CharField(max_length=30, blank=True, null=True)
    last_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'customer_address'


class CustomerCoupon(models.Model):
    customer_id = models.IntegerField(blank=True, null=True)
    coupon_id = models.IntegerField(blank=True, null=True)
    is_used = models.IntegerField(blank=True, null=True)
    is_expire = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'customer_coupon'


class CustomerGroup(models.Model):
    name = models.CharField(max_length=200, blank=True, null=True)
    description = models.CharField(max_length=200, blank=True, null=True)
    group_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'customer_group'


class CustomerInviter(models.Model):
    inviter_id = models.IntegerField(blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    is_coupon = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'customer_inviter'


class Invoice(models.Model):
    order_id = models.IntegerField(blank=True, null=True)
    number = models.IntegerField(blank=True, null=True)
    tax_total = models.CharField(max_length=20, blank=True, null=True)
    invoice_total = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'invoice'


class MgOrder(models.Model):
    increment_id = models.CharField(max_length=30, blank=True, null=True)
    state = models.CharField(max_length=30, blank=True, null=True)
    status = models.CharField(max_length=30, blank=True, null=True)
    coupon_code = models.CharField(max_length=30, blank=True, null=True)
    shipping_description = models.CharField(max_length=30, blank=True, null=True)
    customer_id = models.CharField(max_length=30, blank=True, null=True)
    base_grand_total = models.CharField(max_length=30, blank=True, null=True)
    quote_id = models.CharField(max_length=30, blank=True, null=True)
    shipping_address = models.CharField(max_length=200, blank=True, null=True)
    detail_address = models.CharField(max_length=200, blank=True, null=True)
    customer_email = models.CharField(max_length=30, blank=True, null=True)
    firstname = models.CharField(max_length=30, blank=True, null=True)
    lastname = models.CharField(max_length=30, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    telephone = models.CharField(max_length=30, blank=True, null=True)
    postcode = models.CharField(max_length=30, blank=True, null=True)
    driver_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'mg_order'


class OrderComment(models.Model):
    order_id = models.IntegerField()
    customer_id = models.IntegerField(blank=True, null=True)
    comment_content = models.TextField()
    add_time = models.CharField(max_length=32, blank=True, null=True)
    customer_name = models.CharField(max_length=31, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'order_comment'


class OrderPay(models.Model):
    create_at = models.DateTimeField(blank=True, null=True)
    pay_type = models.IntegerField(blank=True, null=True)
    snap_order_id = models.CharField(max_length=50, blank=True, null=True)
    order_id = models.CharField(max_length=50, blank=True, null=True)
    qr_code = models.CharField(max_length=50, blank=True, null=True)
    pay_status = models.IntegerField(blank=True, null=True)
    amount = models.IntegerField(blank=True, null=True)
    refund = models.IntegerField(blank=True, null=True)
    refund_msg = models.CharField(max_length=200, blank=True, null=True)
    out_trade_no = models.CharField(max_length=50, blank=True, null=True)
    new_order_id = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'order_pay'


class OrderSpecify(models.Model):
    order_id = models.IntegerField(blank=True, null=True)
    driver_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'order_specify'


class Orders(models.Model):
    order_id = models.AutoField(primary_key=True)
    area_id = models.IntegerField(blank=True, null=True)
    create_at = models.DateTimeField(blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    status = models.CharField(max_length=11, blank=True, null=True)
    product_total = models.CharField(max_length=20, blank=True, null=True)
    tax_total = models.CharField(max_length=20, blank=True, null=True)
    coupon_total = models.CharField(max_length=20, blank=True, null=True)
    sales_total = models.CharField(max_length=20, blank=True, null=True)
    shipping_total = models.CharField(max_length=20, blank=True, null=True)
    total = models.CharField(max_length=20, blank=True, null=True)
    customer_coupon_id = models.IntegerField(blank=True, null=True)
    shipping_address = models.TextField(blank=True, null=True)
    customer_name = models.CharField(max_length=30, blank=True, null=True)
    customer_mobile = models.CharField(max_length=30, blank=True, null=True)
    comment = models.TextField(blank=True, null=True)
    product_desc = models.TextField(blank=True, null=True)
    driver_id = models.IntegerField(blank=True, null=True)
    total_pay = models.TextField(blank=True, null=True)
    order_remark = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'orders'


class OrdersTest(models.Model):
    order_id = models.CharField(max_length=20, blank=True, null=True)
    area_id = models.IntegerField(blank=True, null=True)
    create_at = models.DateTimeField(blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    status = models.CharField(max_length=11, blank=True, null=True)
    product_total = models.CharField(max_length=20, blank=True, null=True)
    tax_total = models.CharField(max_length=20, blank=True, null=True)
    coupon_total = models.CharField(max_length=20, blank=True, null=True)
    sales_total = models.CharField(max_length=20, blank=True, null=True)
    shipping_total = models.CharField(max_length=20, blank=True, null=True)
    total = models.CharField(max_length=20, blank=True, null=True)
    customer_coupon_id = models.IntegerField(blank=True, null=True)
    shipping_address = models.TextField(blank=True, null=True)
    customer_name = models.CharField(max_length=30, blank=True, null=True)
    customer_mobile = models.CharField(max_length=30, blank=True, null=True)
    comment = models.TextField(blank=True, null=True)
    product_desc = models.TextField(blank=True, null=True)
    driver_id = models.IntegerField(blank=True, null=True)
    total_pay = models.TextField(blank=True, null=True)
    order_remark = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'orders_test'


class Product(models.Model):
    product_id = models.AutoField(primary_key=True)
    sku = models.CharField(unique=True, max_length=50, blank=True, null=True)
    en_name = models.CharField(max_length=200, blank=True, null=True)
    name = models.CharField(max_length=200, blank=True, null=True)
    price = models.CharField(max_length=11, blank=True, null=True)
    purchase_price = models.CharField(max_length=11, blank=True, null=True)
    description = models.CharField(max_length=500, blank=True, null=True)
    manufacturer = models.CharField(max_length=30, blank=True, null=True)
    images_num = models.IntegerField(blank=True, null=True)
    search_key = models.CharField(max_length=300, blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    tax_id = models.CharField(max_length=11, blank=True, null=True)
    shop_ids = models.TextField(blank=True, null=True)
    cat_ids = models.CharField(max_length=200, blank=True, null=True)
    special_price = models.CharField(max_length=11, blank=True, null=True)
    special_price_start = models.CharField(max_length=32, blank=True, null=True)
    special_price_end = models.CharField(max_length=32, blank=True, null=True)
    total_sell = models.IntegerField()
    create_at = models.CharField(max_length=30, blank=True, null=True)
    quality_date = models.CharField(max_length=30, blank=True, null=True)
    show_index = models.IntegerField(blank=True, null=True)
    buy_limit = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product'


class ProductComment(models.Model):
    product_id = models.IntegerField(blank=True, null=True)
    order_id = models.IntegerField(blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    content = models.TextField(blank=True, null=True)
    create_at = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_comment'


class ProductDetail(models.Model):
    product_id = models.IntegerField(blank=True, null=True)
    detail = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_detail'


class ProductOrder(models.Model):
    product_id = models.IntegerField(blank=True, null=True)
    order_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_order'


class ProductStock(models.Model):
    shop_id = models.IntegerField(blank=True, null=True)
    product_id = models.IntegerField(blank=True, null=True)
    qty = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_stock'
        unique_together = (('shop_id', 'product_id'),)


class ProductTierPrice(models.Model):
    product_id = models.IntegerField(blank=True, null=True)
    tier_price = models.CharField(max_length=30, blank=True, null=True)
    tier_count = models.IntegerField(blank=True, null=True)
    customer_group_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'product_tier_price'
        unique_together = (('product_id', 'customer_group_id'),)


class Refunds(models.Model):
    create_at = models.DateTimeField(blank=True, null=True)
    pay_type = models.IntegerField(blank=True, null=True)
    snap_order_id = models.CharField(max_length=50, blank=True, null=True)
    order_id = models.CharField(max_length=50, blank=True, null=True)
    new_order_id = models.CharField(max_length=50, blank=True, null=True)
    refund = models.IntegerField(blank=True, null=True)
    refund_products = models.CharField(max_length=200, blank=True, null=True)
    refund_shipping = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'refunds'


class Tax(models.Model):
    tax_value = models.FloatField(blank=True, null=True)
    description = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tax'


class Zipcode(models.Model):
    zipcode = models.CharField(max_length=50, blank=True, null=True)
    area_id = models.IntegerField(blank=True, null=True)
    free_shipping = models.IntegerField(blank=True, null=True)
    shipping_amount = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'zipcode'
localhost:BdbbuyDataCenter liweixi$ 
